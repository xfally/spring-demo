### 应用名 ###
spring.application.name=com-example-demo

### 服务端口 ###
server.port=8080
# 某些电脑或服务器无法正确探测IP地址，此时可以手动指定IP
#server.ip=
server.ip=192.168.101.150
#server.host=demo-server

### 调试开关 ###
debug=true

### 外部认证：SSO配置 ###
## 可与内部认证同时启用，但不建议。
# 启用开关
keycloak.enabled=true
# keycloak服务地址
keycloak.auth-server-url=http://192.168.101.150:18080/auth
# realm名称
keycloak.realm=demo
# clientID名称
keycloak.resource=demo
# 其他配置
keycloak.ssl-required=none
# 请用keycloak的admin账号登录其管理员控制台页面，查看本client的secret值，然后更新此处
keycloak.credentials.secret=b03ef4fe-791b-4773-a46c-0d095bf85906
#keycloak.public-client=true
keycloak.use-resource-role-mappings=true
# 安全限制
keycloak.securityConstraints[0].authRoles[0]=admin
keycloak.securityConstraints[0].authRoles[1]=user
keycloak.securityConstraints[0].securityCollections[0].name=user stuff
keycloak.securityConstraints[0].securityCollections[0].patterns[0]=/swagger-ui.html
keycloak.securityConstraints[0].securityCollections[0].patterns[1]=/customer/*
keycloak.securityConstraints[0].securityCollections[0].patterns[2]=/product/*
keycloak.securityConstraints[0].securityCollections[0].patterns[3]=/order/*
keycloak.securityConstraints[0].securityCollections[0].patterns[4]=/color/*
keycloak.securityConstraints[1].authRoles[0]=admin
keycloak.securityConstraints[1].securityCollections[0].name=admin stuff
keycloak.securityConstraints[1].securityCollections[0].patterns[0]=/actuator

### 内部认证 ###
## 可与外部认证同时启用，但不建议。
# 启用开关
auth.enable=false
# 需拦截并进行认证的url清单，以英文“,”分割
auth.list=/customer/*,/product/*,/order/*,/color/*

### 监控服务配置 ###
## 访问地址：http://{ip}:8080/actuator（查看所有可用端点）
# 启用开关
management.endpoints.enabled-by-default=${debug}
# 暴露端点
management.endpoints.web.exposure.include=*
# 不暴露端点
management.endpoints.web.exposure.exclude=shutdown

### 数据源配置 ###
# 连接池设置（springboot默认绑定tomcat数据源的连接池，这里换用druid）
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

# 启用StatFilter
spring.datasource.druid.web-stat-filter.enabled=true
# 添加过滤规则
spring.datasource.druid.web-stat-filter.url-pattern=/*
# 排除一些不必要的url
spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*
# 开启session统计功能
spring.datasource.druid.web-stat-filter.session-stat-enable=true
# 缺省sessionStatMaxCount是1000个
spring.datasource.druid.web-stat-filter.session-stat-max-count=1000
#spring.datasource.druid.web-stat-filter.principal-session-name=
#spring.datasource.druid.web-stat-filter.principal-cookie-name=
#spring.datasource.druid.web-stat-filter.profile-enable=

## 访问地址：http://{ip}:8080/druid
# 启用内置的监控页面
spring.datasource.druid.stat-view-servlet.enabled=${debug}
# 内置监控页面的地址
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
# 关闭 Reset All 功能
spring.datasource.druid.stat-view-servlet.reset-enable=true
# 设置登录用户名
spring.datasource.druid.stat-view-servlet.login-username=admin
# 设置登录密码
spring.datasource.druid.stat-view-servlet.login-password=admin
# 白名单（如果allow没有配置或者为空，则允许所有访问）
#spring.datasource.druid.stat-view-servlet.allow=127.0.0.1
spring.datasource.druid.stat-view-servlet.allow=
# 黑名单（deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝）
#spring.datasource.druid.stat-view-servlet.deny=

## datasource1
spring.datasource.druid.ds1.url=jdbc:mysql://192.168.101.150:3306/com_example_demo?useUnicode=true&useSSL=false&character_set_server=utf8mb4&allowPublicKeyRetrieval=true
spring.datasource.druid.ds1.username=root
spring.datasource.druid.ds1.password=123456
spring.datasource.druid.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
# 连接池初始化连接数
spring.datasource.druid.ds1.initial-size=5
# 最小等待连接中的数量，为0则无限制
spring.datasource.druid.ds1.min-idle=10
# 最大连接活动数
spring.datasource.druid.ds1.max-active=50
# 最大等待毫秒数
spring.datasource.druid.ds1.max-wait=10000
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.ds1.filters=stat,wall

## datasource2
spring.datasource.druid.ds2.url=jdbc:postgresql://192.168.101.150:5432/com_example_demo
spring.datasource.druid.ds2.username=postgres
spring.datasource.druid.ds2.password=123456
spring.datasource.druid.ds2.driver-class-name=org.postgresql.Driver
# 连接池初始化连接数
spring.datasource.druid.ds2.initial-size=5
# 最小等待连接中的数量，为0则无限制
spring.datasource.druid.ds2.min-idle=10
# 最大连接活动数
spring.datasource.druid.ds2.max-active=50
# 最大等待毫秒数
spring.datasource.druid.ds2.max-wait=10000
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.ds2.filters=stat,wall

### jpa配置 ###
spring.jpa.ds1.show-sql=true
spring.jpa.ds1.generate-ddl=true
spring.jpa.ds1.hibernate.ddl-auto=update
spring.jpa.ds1.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.ds2.show-sql=true
spring.jpa.ds2.generate-ddl=true
spring.jpa.ds2.hibernate.ddl-auto=update
spring.jpa.ds2.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

### mongodb配置 ###
## 集群配置
spring.data.mongodb.uri=mongodb://root:123456@192.168.101.150:27017,192.168.101.150:27018,192.168.101.150:27019/com_example_demo?replicaSet=rs0;authSource=admin;slaveOk=true
## 单实例配置
#spring.data.mongodb.host=192.168.101.150
#spring.data.mongodb.port=27017
#spring.data.mongodb.username=root
#spring.data.mongodb.password=123456
#spring.data.mongodb.database=com_example_demo
# 用于验证连接用户的数据库
#spring.data.mongodb.authentication-database=admin
#spring.data.mongodb.grid-fs-database=
#spring.data.mongodb.repositories.type=auto
#spring.data.mongodb.field-naming-strategy=

### redis配置 ###
spring.redis.jedis.pool.min-idle=5
spring.redis.jedis.pool.max-idle=10
spring.redis.jedis.pool.max-wait=2000
spring.redis.jedis.pool.max-active=10
spring.redis.host=192.168.101.150
spring.redis.port=6379
spring.redis.password=
spring.redis.timeout=1000

### 缓存配置 ###
# 缓存引擎
spring.cache.type=REDIS
# NONE表示禁用
#spring.cache.type=NONE
# 缓存名，便于缓存注解引用
spring.cache.cache-names=demo
# redis是否允许缓存空值
spring.cache.redis.cache-null-values=true
# redis数据是否使用key前缀
spring.cache.redis.use-key-prefix=true
# redis数据的key前缀
spring.cache.redis.key-prefix=demo_
# redis数据过期（超时）时间，单位毫秒
spring.cache.redis.time-to-live=60000

### RabbitMQ配置
## 访问地址：http://{ip}:15672
spring.rabbitmq.host=192.168.101.150
spring.rabbitmq.port=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=admin
# 是否确认发送的消息已被消费
spring.rabbitmq.publisher-confirms=true
# 自定义消息队列名称
rabbitmq.queue.msg=demo
# 自定义字段
spring.rabbitmq.web-port=15672

### Eureka配置 ###
## 访问地址：http://{ip}:7001
# 自定义字段
eureka.address=192.168.101.150:7001
# 常规配置
eureka.client.register-with-eureka=true
eureka.client.fetchRegistry=true
eureka.client.serviceUrl.defaultZone=http://${eureka.address}/eureka/
eureka.instance.prefer-ip-address=true
eureka.instance.instance-id=${spring.application.name}:${server.ip}:${server.port}

### swagger配置 ###
## 访问地址：http://{ip}:8080/swagger-ui.html
# 启用开关
swagger.enable=${debug}
swagger.contact.name=pax
swagger.contact.url=http://xfally.github.io/
swagger.contact.email=coolwinding@gmail.com
# swagger默认扫描所有
#swagger.base-package=com.example.demo

### 日志配置 ###
# springboot2.x slf4j默认使用新版logback
logging.level.root=INFO
logging.level.com.example.demo=DEBUG
logging.level.org.mybatis=DEBUG
logging.file=./log/demo.log
